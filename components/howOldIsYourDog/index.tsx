import React, {FC, useState} from 'react';
import {useTranslation} from "next-i18next";
import {DatePicker, DateView, DesktopDatePicker, LocalizationProvider} from "@mui/x-date-pickers";
import svLocale from 'date-fns/locale/sv';
import enLocale from 'date-fns/locale/en-US';

import { PrimaryButton, WhiteSpace } from "@/components";
import { CustomAdieu, H4AndAHalf, H5, P1 } from "@/components/texts";
import { primaryColorTokens } from "@/components/tokens/color";
import StageIndicator from "@/components/StageIndicator";
import {AdapterDateFns} from "@mui/x-date-pickers/AdapterDateFns";

interface HowOldIsYourDogProps {
	isMobile: boolean;
	onNext: (birthDate: Date) => void;
	currentStage?: number;
	selectStage?: (stage: number) => void;
	isEdit?: boolean;
	isSignup?: boolean;
}

export const AgeString: FC<{ date: Date, isMobile: boolean }> = ({date, isMobile}) => {
	const {t} = useTranslation();
	const yearString = t('vetai.dogagepage.year.singular');
	const yearsString = t('vetai.dogagepage.year.plural');
	const monthString = t('vetai.dogagepage.month.singular');
	const monthsString = t('vetai.dogagepage.month.plural');
	const weekString = t('vetai.dogagepage.week.singular');
	const weeksString = t('vetai.dogagepage.week.plural');
	const dayString = t('vetai.dogagepage.day.singular'); // Note the change here, using 'days' instead of 'day'
	const daysString = t('vetai.dogagepage.day.plural');
	const newbornString = t('vetai.dogagepage.newborn'); // Note the change here, using 'newborns' instead of 'newborn'

	const getAgeString = (yearsMonthsWeeksDays: number[]): string => {
		const [years, months, weeks, days] = yearsMonthsWeeksDays;
		const ageParts = [];

		if (years > 0) {
			const yearS = years === 1 ? yearString : years > 1 ? yearsString : '';
			ageParts.push(`${years} ${yearS}`);
		}

		if (months > 0) {
			const monthS = months === 1 ? monthString : months > 1 ? monthsString : '';
			ageParts.push(`${months} ${monthS}`);
		}

		if (weeks > 0) {
			const weekS = weeks === 1 ? weekString : weeks > 1 ? weeksString : '';
			ageParts.push(`${weeks} ${weekS}`);
		}

		if (days > 0) {
			const dayS = days === 1 ? dayString : days > 1 ? daysString : '';
			ageParts.push(`${days} ${dayS}`);
		}

		return ageParts.length > 0 ? ageParts.join(', ') : newbornString;
	};

	const fromDateToAgeInYearsMonthsWeeksDays = (birthDate: Date): number[] => {
		const ageInDays = fromDateToAgeInDays(birthDate);
		const years = Math.floor(ageInDays / 365);
		const remainingDaysAfterYears = ageInDays % 365;
		const months = Math.floor(remainingDaysAfterYears / 30); // Assuming an average month has 30 days
		const remainingDaysAfterMonths = remainingDaysAfterYears % 30;
		const weeks = Math.floor(remainingDaysAfterMonths / 7);
		const days = remainingDaysAfterMonths % 7;
		return [years, months, weeks, days];
	};


	const ageArray = fromDateToAgeInYearsMonthsWeeksDays(date);
	const ageString = getAgeString(ageArray);

	return <span>{ageString}</span>
};

export const fromDateToAgeInDays = (birthDate: Date): number => {
	console.log("birthdate is", birthDate)
	const currentDate = new Date();
	const diffInMilliseconds = currentDate.getTime() - birthDate.getTime();
	const ageInDays = diffInMilliseconds / (1000 * 60 * 60 * 24);
	return Math.floor(ageInDays);
};

const HowOldIsYourDog: FC<HowOldIsYourDogProps> = ({
													   isMobile,
													   onNext,
													   selectStage,
													   currentStage,
													   isEdit,
													   isSignup
												   }) => {
	const [error, setError] = useState<string | null>(null);
	const [birthDate, setBirthDate] = useState<Date | null>(null);

	const onSubmit = () => {
		if (!birthDate) {
			setError('Please select a valid birth date.');
			return;
		}
		onNext(birthDate);
	};


	let cardFontSize = "32px"
	let cardFontWeight = 900
	let cardLineHeight = "105%"
	if (isMobile) {
		cardFontSize = "20px"
	}


	const {t} = useTranslation()
	return (
		<div className="flex flex-row mb-[100px]">
			<div className="flex flex-col w-full items-center lg:w-[849px]">
				{!isMobile ? (
					<div className={"flex flex-col items-center"}>
						<H4AndAHalf
							textAlign={"center"}>{t('vetai.dogagepage.title.first')} {t('vetai.dogagepage.title.second')}</H4AndAHalf>
					</div>
				) : (
					<div className={"flex flex-col items-center"}>
						<H5 textAlign={'center'}>{t('vetai.dogagepage.title.first')}</H5>
						<H5 textAlign={'center'}>{t('vetai.dogagepage.title.second')}</H5>
					</div>
				)}
				{isMobile ?
					<WhiteSpace height={'44px'}/>
					:
					<WhiteSpace height={"63px"}/>
				}
				<DatePickerComponent
					openTo={"year"}
					isMobile={isMobile}
					dateSelected={birthDate!}
					customPlaceholder={t('vetai.dogagepage.selectdate')}
					setDate={setBirthDate}
				/>
				<WhiteSpace height={'40px'}/>
				{birthDate && (
					<>
						<CustomAdieu
							color={primaryColorTokens.virgo}
							fontSize={cardFontSize}
							fontWeight={cardFontWeight}
							lineHeight={cardLineHeight}
						>
							<AgeString isMobile={isMobile} date={birthDate!}/>
						</CustomAdieu>
					</>
				)}
				<WhiteSpace height={'40px'}/>
				{error && (
					<>
						<P1 color={primaryColorTokens.virgo}>{error}</P1>
						<WhiteSpace height={'30px'}/>
					</>
				)}
				<PrimaryButton
					isSmall
					text={t('vetai.nextbutton') || ''}
					onClick={onSubmit}
				/>
			</div>
			{!isEdit || !isSignup && (
				<div className="fixed hidden lg:block right-0 fixed top-0 right-0 mt-[300px]">
					<StageIndicator
						selectStage={selectStage!}
						currentStage={currentStage!}
						totalStages={6} // Increase the total number of stages
						stageTitles={[
							t('vetai.age'),
							t('vetai.breed'),
							t('vetai.symptoms'),
							t('vetai.summary'),
							t('vetai.assessment1'),
							t('vetai.nextsteps1'),
						]}
					/>
				</div>
			)}
		</div>
	);
};

interface DatePickerComponentProps {
	customPlaceholder: string;
	setDate: (date: Date | null) => void;
	dateSelected: Date
	isMobile: boolean
	openTo: DateView
}

export const DatePickerComponent: FC<DatePickerComponentProps> = ({
																	  customPlaceholder,
																	  setDate,
																	  dateSelected,
																	  isMobile,
																	  openTo

																  }) => {
	const {i18n} = useTranslation()
	const localeAdapter = i18n.language === 'se' ? svLocale : enLocale;
	const dateFormat = i18n.language == "se" ? "dd/MM/yyyy" : "MM/dd/yyyy"

	const inputHeight = isMobile ? "42px" : "81px"
	const fontSize = isMobile ? "16px" : "22px"

	return (
		<div className={"w-full"}>
			<LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={localeAdapter}>
				<DatePicker
					sx={{
						"& .MuiFormLabel-root": {
							fontSize: fontSize,
							fontFamily: "Josefin Sans",
						},
						"& .MuiInputBase-input": {
							fontSize: fontSize,
							fontFamily: "Josefin Sans",
							height: inputHeight,
							paddingTop: "0px",
							paddingBottom: "0px"
						},
						"& .MuiOutlinedInput-notchedOutline": {
							border: "2px solid black"
						}
					}}
					openTo={openTo}
					value={dateSelected}
					onChange={(newValue: Date | null) => setDate(newValue)}
					slots={{
						openPickerIcon: isMobile ? CalendarIconMobile : CalendarIcon,
					}}
					format={dateFormat}
					maxDate={new Date()}
					slotProps={{textField: {fullWidth: true}}}
				/>
			</LocalizationProvider>
		</div>
	);
};

const CalendarIcon = () => (
	<svg width="39" height="37" viewBox="0 0 39 37" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path id="Vector" fillRule="evenodd" clipRule="evenodd"
			  d="M10.5131 26.7222H7.08543V30.1504H10.5131V26.7222ZM21.2138 26.7222H17.7862V30.1504H21.2138V26.7222ZM16.8805 24.9062H22.1238C22.3648 24.9062 22.5959 25.0018 22.7665 25.172C22.9371 25.3422 23.0333 25.5732 23.0338 25.8142V31.0584C23.0338 31.2998 22.938 31.5313 22.7673 31.702C22.5966 31.8727 22.3652 31.9686 22.1238 31.9686H16.8783C16.637 31.9686 16.4055 31.8727 16.2349 31.702C16.0642 31.5313 15.9683 31.2998 15.9683 31.0584V25.8142C15.9689 25.5732 16.065 25.3422 16.2356 25.172C16.4062 25.0018 16.6374 24.9062 16.8783 24.9062H16.8805ZM31.9172 26.7222H28.4865V30.1504H31.9146V26.7222H31.9172ZM27.5812 24.9062H32.8246C33.0652 24.9068 33.2957 25.0026 33.4659 25.1728C33.636 25.3429 33.7318 25.5735 33.7324 25.8142V31.0584C33.7324 31.2994 33.6368 31.5306 33.4666 31.7012C33.2964 31.8719 33.0655 31.968 32.8246 31.9686H27.5812C27.3403 31.968 27.1094 31.8719 26.9392 31.7012C26.769 31.5306 26.6734 31.2994 26.6734 31.0584V25.8142C26.674 25.5735 26.7698 25.3429 26.9399 25.1728C27.1101 25.0026 27.3406 24.9068 27.5812 24.9062ZM10.5131 17.5963H7.08543V21.025H10.5131V17.5963ZM6.17977 15.7804H11.4231C11.6637 15.7809 11.8943 15.8768 12.0644 16.0469C12.2345 16.2171 12.3304 16.4477 12.3309 16.6884V21.9326C12.3304 22.1732 12.2345 22.4038 12.0644 22.574C11.8943 22.7442 11.6637 22.84 11.4231 22.8406H6.17977C5.93917 22.84 5.70859 22.7442 5.53846 22.574C5.36834 22.4038 5.27251 22.1732 5.27193 21.9326V16.6884C5.27251 16.4477 5.36834 16.2171 5.53846 16.0469C5.70859 15.8768 5.93917 15.7809 6.17977 15.7804ZM21.2164 17.5963H17.7888V21.025H21.2164V17.5963ZM16.8831 15.7804H22.1264C22.3674 15.7804 22.5985 15.876 22.7691 16.0462C22.9397 16.2164 23.0359 16.4473 23.0364 16.6884V21.9326C23.0359 22.1736 22.9397 22.4045 22.7691 22.5748C22.5985 22.745 22.3674 22.8406 22.1264 22.8406H16.8783C16.6374 22.8406 16.4062 22.745 16.2356 22.5748C16.065 22.4045 15.9689 22.1736 15.9683 21.9326V16.6884C15.9689 16.4473 16.065 16.2164 16.2356 16.0462C16.4062 15.876 16.6374 15.7804 16.8783 15.7804H16.8831ZM31.9198 17.5963H28.4865V21.025H31.9146V17.5963H31.9198ZM27.5838 15.7804H32.8272C33.0678 15.7809 33.2983 15.8768 33.4685 16.0469C33.6386 16.2171 33.7344 16.4477 33.735 16.6884V21.9326C33.7344 22.1732 33.6386 22.4038 33.4685 22.574C33.2983 22.7442 33.0678 22.84 32.8272 22.8406H27.5838C27.3432 22.84 27.1127 22.7442 26.9425 22.574C26.7724 22.4038 26.6766 22.1732 26.676 21.9326V16.6884C26.6766 16.4477 26.7724 16.2171 26.9425 16.0469C27.1127 15.8768 27.3432 15.7809 27.5838 15.7804ZM8.37547 1.81641C8.12308 1.81789 7.88146 1.91882 7.70299 2.09732C7.52453 2.27581 7.42361 2.51748 7.42213 2.76991V5.044C7.42213 5.29688 7.52257 5.53941 7.70136 5.71822C7.88014 5.89704 8.12263 5.99749 8.37547 5.99749C8.62831 5.99749 8.87079 5.89704 9.04957 5.71822C9.22836 5.53941 9.3288 5.29688 9.3288 5.044V2.77034C9.32732 2.51791 9.22641 2.27625 9.04794 2.09775C8.86948 1.91926 8.62785 1.81832 8.37547 1.81684V1.81641ZM30.6887 1.81641C30.4363 1.818 30.1948 1.91897 30.0163 2.09744C29.8379 2.27591 29.7369 2.51752 29.7353 2.76991V5.044C29.7353 5.29688 29.8358 5.53941 30.0146 5.71822C30.1933 5.89704 30.4358 5.99749 30.6887 5.99749C30.9415 5.99749 31.184 5.89704 31.3628 5.71822C31.5416 5.53941 31.642 5.29688 31.642 5.044V2.77034C31.6405 2.51791 31.5396 2.27625 31.3611 2.09775C31.1827 1.91926 30.941 1.81832 30.6887 1.81684V1.81641ZM19.5321 1.81641C19.2797 1.81789 19.0381 1.91882 18.8596 2.09732C18.6811 2.27581 18.5802 2.51748 18.5787 2.76991V5.044C18.5787 5.29688 18.6792 5.53941 18.858 5.71822C19.0367 5.89704 19.2792 5.99749 19.5321 5.99749C19.7849 5.99749 20.0274 5.89704 20.2062 5.71822C20.385 5.53941 20.4854 5.29688 20.4854 5.044V2.77034C20.4838 2.51795 20.3829 2.27635 20.2044 2.09788C20.026 1.9194 19.7844 1.81844 19.5321 1.81684V1.81641ZM11.1449 2.81672H16.7622V2.77034C16.7622 2.0356 17.054 1.33095 17.5735 0.811414C18.0929 0.291875 18.7975 0 19.5321 0C20.2667 0 20.9712 0.291875 21.4907 0.811414C22.0101 1.33095 22.3019 2.0356 22.3019 2.77034V2.81672H27.9188V2.77034C27.9188 2.0356 28.2106 1.33095 28.7301 0.811414C29.2495 0.291875 29.9541 0 30.6887 0C31.4233 0 32.1278 0.291875 32.6473 0.811414C33.1667 1.33095 33.4585 2.0356 33.4585 2.77034V2.81672H36.6929C37.3045 2.81775 37.8907 3.06118 38.3231 3.49369C38.7556 3.9262 38.999 4.51252 39 5.12418V34.6925C38.9987 35.3041 38.7553 35.8903 38.3229 36.3228C37.8905 36.7552 37.3044 36.9987 36.6929 37H2.30707C2.00468 36.9998 1.70532 36.9398 1.42616 36.8235C1.147 36.7073 0.893545 36.537 0.680333 36.3226L0.676867 36.3191C0.46257 36.1059 0.292467 35.8524 0.176315 35.5733C0.0601628 35.2942 0.000245786 34.9949 3.70882e-08 34.6925V5.12418C-5.43513e-05 4.82122 0.0597107 4.52123 0.175865 4.24143C0.29202 3.96163 0.462278 3.70752 0.676867 3.4937H0.680333C0.893581 3.27931 1.14705 3.10915 1.42621 2.99298C1.70537 2.8768 2.00471 2.8169 2.30707 2.81672H5.60517V2.77034C5.60517 2.0356 5.89699 1.33095 6.41644 0.811414C6.93589 0.291875 7.64042 0 8.37503 0C9.10965 0 9.81417 0.291875 10.3336 0.811414C10.8531 1.33095 11.1449 2.0356 11.1449 2.77034V2.81672ZM37.1843 12.3239V34.6925C37.1833 34.8225 37.1312 34.9469 37.0393 35.0388C36.9473 35.1307 36.8229 35.1827 36.6929 35.1836H2.30707C2.24248 35.1839 2.17846 35.1715 2.11871 35.1469C2.05896 35.1224 2.00467 35.0862 1.95898 35.0406C1.91329 34.9949 1.87709 34.9406 1.8525 34.8809C1.8279 34.8212 1.81538 34.7571 1.81567 34.6925V12.3239H37.1843ZM1.81567 10.508V5.12418C1.81575 5.05966 1.82862 4.99579 1.85353 4.93627C1.87845 4.87676 1.91492 4.82278 1.96083 4.77745C2.053 4.68586 2.17757 4.63431 2.3075 4.63399H5.6056V5.04573C5.6056 5.78047 5.89742 6.48512 6.41688 7.00466C6.93633 7.5242 7.64085 7.81607 8.37547 7.81607C9.11008 7.81607 9.81461 7.5242 10.3341 7.00466C10.8535 6.48512 11.1453 5.78047 11.1453 5.04573V4.63096H16.7622V5.0427C16.7622 5.77744 17.054 6.48208 17.5735 7.00162C18.0929 7.52116 18.7975 7.81304 19.5321 7.81304C20.2667 7.81304 20.9712 7.52116 21.4907 7.00162C22.0101 6.48208 22.3019 5.77744 22.3019 5.0427V4.63096H27.9188V5.0427C27.9188 5.77744 28.2106 6.48208 28.7301 7.00162C29.2495 7.52116 29.9541 7.81304 30.6887 7.81304C31.4233 7.81304 32.1278 7.52116 32.6473 7.00162C33.1667 6.48208 33.4585 5.77744 33.4585 5.0427V4.63096H36.6929C36.8229 4.63209 36.9472 4.68424 37.0392 4.77616C37.1311 4.86809 37.1832 4.99244 37.1843 5.12244V10.508H1.81567ZM6.1776 24.9062H11.4209C11.6615 24.9068 11.8921 25.0026 12.0622 25.1728C12.2324 25.3429 12.3282 25.5735 12.3288 25.8142V31.0584C12.3288 31.2994 12.2332 31.5306 12.063 31.7012C11.8928 31.8719 11.6619 31.968 11.4209 31.9686H6.1776C5.93663 31.968 5.70572 31.8719 5.53553 31.7012C5.36534 31.5306 5.26977 31.2994 5.26977 31.0584V25.8142C5.27034 25.5735 5.36617 25.3429 5.5363 25.1728C5.70642 25.0026 5.937 24.9068 6.1776 24.9062Z"
			  fill="black"/>
	</svg>
)

const CalendarIconMobile = () => (
	<svg width="30" height="24" viewBox="0 0 39 37" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path id="Vector" fillRule="evenodd" clipRule="evenodd"
			  d="M10.5131 26.7222H7.08543V30.1504H10.5131V26.7222ZM21.2138 26.7222H17.7862V30.1504H21.2138V26.7222ZM16.8805 24.9062H22.1238C22.3648 24.9062 22.5959 25.0018 22.7665 25.172C22.9371 25.3422 23.0333 25.5732 23.0338 25.8142V31.0584C23.0338 31.2998 22.938 31.5313 22.7673 31.702C22.5966 31.8727 22.3652 31.9686 22.1238 31.9686H16.8783C16.637 31.9686 16.4055 31.8727 16.2349 31.702C16.0642 31.5313 15.9683 31.2998 15.9683 31.0584V25.8142C15.9689 25.5732 16.065 25.3422 16.2356 25.172C16.4062 25.0018 16.6374 24.9062 16.8783 24.9062H16.8805ZM31.9172 26.7222H28.4865V30.1504H31.9146V26.7222H31.9172ZM27.5812 24.9062H32.8246C33.0652 24.9068 33.2957 25.0026 33.4659 25.1728C33.636 25.3429 33.7318 25.5735 33.7324 25.8142V31.0584C33.7324 31.2994 33.6368 31.5306 33.4666 31.7012C33.2964 31.8719 33.0655 31.968 32.8246 31.9686H27.5812C27.3403 31.968 27.1094 31.8719 26.9392 31.7012C26.769 31.5306 26.6734 31.2994 26.6734 31.0584V25.8142C26.674 25.5735 26.7698 25.3429 26.9399 25.1728C27.1101 25.0026 27.3406 24.9068 27.5812 24.9062ZM10.5131 17.5963H7.08543V21.025H10.5131V17.5963ZM6.17977 15.7804H11.4231C11.6637 15.7809 11.8943 15.8768 12.0644 16.0469C12.2345 16.2171 12.3304 16.4477 12.3309 16.6884V21.9326C12.3304 22.1732 12.2345 22.4038 12.0644 22.574C11.8943 22.7442 11.6637 22.84 11.4231 22.8406H6.17977C5.93917 22.84 5.70859 22.7442 5.53846 22.574C5.36834 22.4038 5.27251 22.1732 5.27193 21.9326V16.6884C5.27251 16.4477 5.36834 16.2171 5.53846 16.0469C5.70859 15.8768 5.93917 15.7809 6.17977 15.7804ZM21.2164 17.5963H17.7888V21.025H21.2164V17.5963ZM16.8831 15.7804H22.1264C22.3674 15.7804 22.5985 15.876 22.7691 16.0462C22.9397 16.2164 23.0359 16.4473 23.0364 16.6884V21.9326C23.0359 22.1736 22.9397 22.4045 22.7691 22.5748C22.5985 22.745 22.3674 22.8406 22.1264 22.8406H16.8783C16.6374 22.8406 16.4062 22.745 16.2356 22.5748C16.065 22.4045 15.9689 22.1736 15.9683 21.9326V16.6884C15.9689 16.4473 16.065 16.2164 16.2356 16.0462C16.4062 15.876 16.6374 15.7804 16.8783 15.7804H16.8831ZM31.9198 17.5963H28.4865V21.025H31.9146V17.5963H31.9198ZM27.5838 15.7804H32.8272C33.0678 15.7809 33.2983 15.8768 33.4685 16.0469C33.6386 16.2171 33.7344 16.4477 33.735 16.6884V21.9326C33.7344 22.1732 33.6386 22.4038 33.4685 22.574C33.2983 22.7442 33.0678 22.84 32.8272 22.8406H27.5838C27.3432 22.84 27.1127 22.7442 26.9425 22.574C26.7724 22.4038 26.6766 22.1732 26.676 21.9326V16.6884C26.6766 16.4477 26.7724 16.2171 26.9425 16.0469C27.1127 15.8768 27.3432 15.7809 27.5838 15.7804ZM8.37547 1.81641C8.12308 1.81789 7.88146 1.91882 7.70299 2.09732C7.52453 2.27581 7.42361 2.51748 7.42213 2.76991V5.044C7.42213 5.29688 7.52257 5.53941 7.70136 5.71822C7.88014 5.89704 8.12263 5.99749 8.37547 5.99749C8.62831 5.99749 8.87079 5.89704 9.04957 5.71822C9.22836 5.53941 9.3288 5.29688 9.3288 5.044V2.77034C9.32732 2.51791 9.22641 2.27625 9.04794 2.09775C8.86948 1.91926 8.62785 1.81832 8.37547 1.81684V1.81641ZM30.6887 1.81641C30.4363 1.818 30.1948 1.91897 30.0163 2.09744C29.8379 2.27591 29.7369 2.51752 29.7353 2.76991V5.044C29.7353 5.29688 29.8358 5.53941 30.0146 5.71822C30.1933 5.89704 30.4358 5.99749 30.6887 5.99749C30.9415 5.99749 31.184 5.89704 31.3628 5.71822C31.5416 5.53941 31.642 5.29688 31.642 5.044V2.77034C31.6405 2.51791 31.5396 2.27625 31.3611 2.09775C31.1827 1.91926 30.941 1.81832 30.6887 1.81684V1.81641ZM19.5321 1.81641C19.2797 1.81789 19.0381 1.91882 18.8596 2.09732C18.6811 2.27581 18.5802 2.51748 18.5787 2.76991V5.044C18.5787 5.29688 18.6792 5.53941 18.858 5.71822C19.0367 5.89704 19.2792 5.99749 19.5321 5.99749C19.7849 5.99749 20.0274 5.89704 20.2062 5.71822C20.385 5.53941 20.4854 5.29688 20.4854 5.044V2.77034C20.4838 2.51795 20.3829 2.27635 20.2044 2.09788C20.026 1.9194 19.7844 1.81844 19.5321 1.81684V1.81641ZM11.1449 2.81672H16.7622V2.77034C16.7622 2.0356 17.054 1.33095 17.5735 0.811414C18.0929 0.291875 18.7975 0 19.5321 0C20.2667 0 20.9712 0.291875 21.4907 0.811414C22.0101 1.33095 22.3019 2.0356 22.3019 2.77034V2.81672H27.9188V2.77034C27.9188 2.0356 28.2106 1.33095 28.7301 0.811414C29.2495 0.291875 29.9541 0 30.6887 0C31.4233 0 32.1278 0.291875 32.6473 0.811414C33.1667 1.33095 33.4585 2.0356 33.4585 2.77034V2.81672H36.6929C37.3045 2.81775 37.8907 3.06118 38.3231 3.49369C38.7556 3.9262 38.999 4.51252 39 5.12418V34.6925C38.9987 35.3041 38.7553 35.8903 38.3229 36.3228C37.8905 36.7552 37.3044 36.9987 36.6929 37H2.30707C2.00468 36.9998 1.70532 36.9398 1.42616 36.8235C1.147 36.7073 0.893545 36.537 0.680333 36.3226L0.676867 36.3191C0.46257 36.1059 0.292467 35.8524 0.176315 35.5733C0.0601628 35.2942 0.000245786 34.9949 3.70882e-08 34.6925V5.12418C-5.43513e-05 4.82122 0.0597107 4.52123 0.175865 4.24143C0.29202 3.96163 0.462278 3.70752 0.676867 3.4937H0.680333C0.893581 3.27931 1.14705 3.10915 1.42621 2.99298C1.70537 2.8768 2.00471 2.8169 2.30707 2.81672H5.60517V2.77034C5.60517 2.0356 5.89699 1.33095 6.41644 0.811414C6.93589 0.291875 7.64042 0 8.37503 0C9.10965 0 9.81417 0.291875 10.3336 0.811414C10.8531 1.33095 11.1449 2.0356 11.1449 2.77034V2.81672ZM37.1843 12.3239V34.6925C37.1833 34.8225 37.1312 34.9469 37.0393 35.0388C36.9473 35.1307 36.8229 35.1827 36.6929 35.1836H2.30707C2.24248 35.1839 2.17846 35.1715 2.11871 35.1469C2.05896 35.1224 2.00467 35.0862 1.95898 35.0406C1.91329 34.9949 1.87709 34.9406 1.8525 34.8809C1.8279 34.8212 1.81538 34.7571 1.81567 34.6925V12.3239H37.1843ZM1.81567 10.508V5.12418C1.81575 5.05966 1.82862 4.99579 1.85353 4.93627C1.87845 4.87676 1.91492 4.82278 1.96083 4.77745C2.053 4.68586 2.17757 4.63431 2.3075 4.63399H5.6056V5.04573C5.6056 5.78047 5.89742 6.48512 6.41688 7.00466C6.93633 7.5242 7.64085 7.81607 8.37547 7.81607C9.11008 7.81607 9.81461 7.5242 10.3341 7.00466C10.8535 6.48512 11.1453 5.78047 11.1453 5.04573V4.63096H16.7622V5.0427C16.7622 5.77744 17.054 6.48208 17.5735 7.00162C18.0929 7.52116 18.7975 7.81304 19.5321 7.81304C20.2667 7.81304 20.9712 7.52116 21.4907 7.00162C22.0101 6.48208 22.3019 5.77744 22.3019 5.0427V4.63096H27.9188V5.0427C27.9188 5.77744 28.2106 6.48208 28.7301 7.00162C29.2495 7.52116 29.9541 7.81304 30.6887 7.81304C31.4233 7.81304 32.1278 7.52116 32.6473 7.00162C33.1667 6.48208 33.4585 5.77744 33.4585 5.0427V4.63096H36.6929C36.8229 4.63209 36.9472 4.68424 37.0392 4.77616C37.1311 4.86809 37.1832 4.99244 37.1843 5.12244V10.508H1.81567ZM6.1776 24.9062H11.4209C11.6615 24.9068 11.8921 25.0026 12.0622 25.1728C12.2324 25.3429 12.3282 25.5735 12.3288 25.8142V31.0584C12.3288 31.2994 12.2332 31.5306 12.063 31.7012C11.8928 31.8719 11.6619 31.968 11.4209 31.9686H6.1776C5.93663 31.968 5.70572 31.8719 5.53553 31.7012C5.36534 31.5306 5.26977 31.2994 5.26977 31.0584V25.8142C5.27034 25.5735 5.36617 25.3429 5.5363 25.1728C5.70642 25.0026 5.937 24.9068 6.1776 24.9062Z"
			  fill="black"/>
	</svg>
);


export default HowOldIsYourDog;
